name: Build and Deploy

on:
  release:
    types: [released]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:${{ github.ref_name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Copy compose files to server
        uses: appleboy/scp-action@v1
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          source: "compose.yaml"
          target: "/opt/app/"
          overwrite: true

      - name: Deploy to production
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            # Создаем директорию если не существует
            mkdir -p /opt/app

            # Получаем секреты из безопасного хранилища
            echo "$PROD_ENV" > /opt/app/.env
            chmod 600 /opt/app/.env

            # Логинимся в registry
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Останавливаем текущие контейнеры
            docker compose -f /opt/app/compose.yaml down

            # Тянем новый образ
            docker pull ghcr.io/${{ github.repository }}:latest

            # Запускаем обновлённые контейнеры
            docker compose -f /opt/app/compose.yaml up -d

            # Очистка
            docker system prune -f
          env:
            PROD_ENV: ${{ secrets.PRODUCTION_ENV }}
